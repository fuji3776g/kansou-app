<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>感想メーカープロンプト｜内省支援</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=M+PLUS+Rounded+1c:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --teal-50:#f0fdfa; --teal-100:#ccfbf1; --teal-200:#99f6e4; --teal-300:#5eead4; --teal-400:#2dd4bf; --teal-500:#14b8a6; --teal-600:#0d9488; --teal-700:#0f766e; --teal-800:#115e59; --teal-900:#134e4a;
    }
    body { font-family: 'M PLUS Rounded 1c', system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial, 'Noto Sans JP', sans-serif; background: var(--teal-50); color:#0f172a; }
    .card { background:#fff; border:1px solid var(--teal-100); border-radius:1rem; box-shadow:0 6px 16px rgba(0,0,0,.05); }
    .bubble { max-width: 80%; border-radius: 1rem; padding:.75rem 1rem; box-shadow:0 2px 8px rgba(0,0,0,.06) }
    .bubble-teacher { background:#ffffff; border:1px solid var(--teal-100); }
    .bubble-student { background:#e6fffb; border:1px solid var(--teal-200); }
    .loader { border:4px solid var(--teal-100); border-top:4px solid var(--teal-500); border-radius:50%; width:32px; height:32px; animation:spin 1s linear infinite; }
    @keyframes spin { to { transform: rotate(360deg);} }
    .fade-in { animation: fade .28s ease-out both; }
    @keyframes fade { from { opacity:0; transform: translateY(6px);} to{ opacity:1; transform:none;} }
  </style>
</head>
<body>
  <main class="mx-auto max-w-3xl p-4 md:p-8">
    <header class="text-center mb-6 md:mb-8">
      <h1 class="text-2xl md:text-4xl font-bold text-teal-800">感想メーカープロンプト ✍️</h1>
      <p class="text-teal-700 mt-2">AIに答えを聞くのではなく、自分で問いを立てて考えを深める学び用ツール</p>
    </header>

    <!-- 設定パネル -->
    <section class="card p-4 md:p-6 mb-6">
      <div class="grid gap-4 md:grid-cols-3">
        <label class="block md:col-span-3">
          <span class="text-sm font-semibold text-teal-800">先生を選ぶ</span>
          <div id="personaGroup" class="mt-2 flex flex-wrap gap-2">
            <label><input type="radio" name="persona" value="熱血先生" checked> 熱血先生</label>
            <label><input type="radio" name="persona" value="ハナマル先生"> ハナマル先生</label>
            <label><input type="radio" name="persona" value="ピシッと先生"> ピシッと先生</label>
            <label><input type="radio" name="persona" value="ユーモア先生"> ユーモア先生</label>
            <label><input type="radio" name="persona" value="じっくり先生"> じっくり先生</label>
          </div>
        </label>
        <label class="block md:col-span-3 mt-4">
          <span class="text-sm font-semibold text-teal-800">授業名（任意）</span>
          <input id="lesson" type="text" placeholder="例：生成AI研修" class="mt-1 w-full rounded-lg border border-teal-200 bg-white px-3 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500" />
        </label>
      </div>
      <div class="mt-3 flex flex-wrap items-center gap-2">
        <span class="inline-flex items-center gap-2 rounded-full border border-teal-200 bg-white px-3 py-1 text-sm text-teal-800">
          🔄 3つの質問 → 4つ目で感想のヒント
        </span>
        <span class="inline-flex items-center gap-2 rounded-full border border-teal-200 bg-white px-3 py-1 text-sm text-teal-800">
          ✅ 例文なし／質問だけ＋励まし
        </span>
      </div>
    </section>

    <!-- 進捗表示 -->
    <section class="mb-4 flex items-center justify-between">
      <div class="flex items-center gap-2 text-teal-800">
        <span class="font-bold">進捗</span>
        <div class="w-40 h-2 bg-white border border-teal-100 rounded-full overflow-hidden">
          <div id="bar" class="h-full bg-teal-500" style="width:0%"></div>
        </div>
        <span id="stepLabel" class="text-sm">0 / 3</span>
      </div>
      <div class="flex gap-2">
        <button id="resetBtn" class="rounded-full border border-teal-200 bg-white px-3 py-1 text-sm text-teal-700 hover:bg-teal-50">リセット</button>
        <button id="exportBtn" class="rounded-full bg-teal-600 px-3 py-1 text-sm font-semibold text-white hover:bg-teal-700">ヒントをコピー</button>
      </div>
    </section>

    <!-- チャット領域 -->
    <section id="chat" class="card p-4 md:p-6 min-h-[340px]">
      <ul id="log" class="space-y-3"></ul>
      <div id="loader" class="hidden justify-center mt-4">
        <div class="loader"></div>
      </div>

      <div id="hintWrap" class="hidden mt-4 border-t border-teal-100 pt-4">
        <h2 class="text-teal-800 font-bold mb-2">🧭 感想のヒント</h2>
        <textarea id="hint" class="w-full min-h-[120px] rounded-lg border border-teal-200 p-3 focus:outline-none focus:ring-2 focus:ring-teal-500" readonly></textarea>
        <p class="text-xs text-teal-700 mt-2">※ ヒントはあなたの言葉をもとにした書き方の型。このまま写すのではなく、自分の言葉で仕上げること。</p>
        <p class="text-sm text-center text-teal-800 font-semibold mt-2">👉 クラスルームにコピペして感想欄に貼ってね</p>
      </div>

      <div class="mt-4 flex items-end gap-2">
        <textarea id="input" rows="2" class="flex-1 rounded-lg border border-teal-200 p-3 focus:outline-none focus:ring-2 focus:ring-teal-500" placeholder="ここに下書き→クラスルームにコピペを"></textarea>
        <button id="send" class="rounded-full bg-teal-600 px-5 py-3 font-bold text-white hover:bg-teal-700">送信</button>
      </div>
    </section>

    <footer class="text-center text-xs text-slate-500 mt-6">© 2025 Reflective Learning Toolkit</footer>
  </main>

  <script>
    const logEl = document.getElementById('log');
    const inputEl = document.getElementById('input');
    const sendBtn = document.getElementById('send');
    const resetBtn = document.getElementById('resetBtn');
    const exportBtn = document.getElementById('exportBtn');
    const hintWrap = document.getElementById('hintWrap');
    const hintEl = document.getElementById('hint');
    const barEl = document.getElementById('bar');
    const stepLabelEl = document.getElementById('stepLabel');
    const lessonEl = document.getElementById('lesson');
    const loaderEl = document.getElementById('loader');

    const state = { step: 0, history: [] };
    const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=";
    const apiKey = ""; // APIキーはCanvasによって自動的に提供されます

    // チャットバブルを追加する関数
    function addBubble(role, text) {
      const li = document.createElement('li');
      li.className = 'fade-in flex ' + (role === 'teacher' ? 'justify-start' : 'justify-end');
      const bubble = document.createElement('div');
      bubble.className = 'bubble ' + (role === 'teacher' ? 'bubble-teacher' : 'bubble-student');
      bubble.innerText = text;
      li.appendChild(bubble);
      logEl.appendChild(li);
      logEl.scrollTop = logEl.scrollHeight;
      state.history.push({ role, text });
    }

    // 進捗バーを更新する関数
    function updateProgress() {
      const pct = Math.min(state.step, 3) / 3 * 100;
      barEl.style.width = pct + '%';
      stepLabelEl.textContent = `${Math.min(state.step, 3)} / 3`;
    }

    // 入力とボタンの状態を管理する関数
    function setUIState(enabled) {
      inputEl.disabled = !enabled;
      sendBtn.disabled = !enabled;
      if (enabled) {
        loaderEl.classList.add('hidden');
        inputEl.focus();
      } else {
        loaderEl.classList.remove('hidden');
      }
    }

    // 先生のペルソナを取得する関数
    function getPersona() {
      const checked = document.querySelector('input[name="persona"]:checked');
      return checked ? checked.value : '熱血先生';
    }

    // APIを呼び出して、質問やヒントを生成する関数
    async function fetchGeminiResponse(prompt) {
      setUIState(false); // UIを無効化
      let retries = 0;
      const maxRetries = 5;
      const initialDelay = 1000;

      while (retries < maxRetries) {
        try {
          // APIに渡すためのチャット履歴を作成
          const chatHistory = state.history.map(entry => ({
            role: entry.role === 'teacher' ? 'model' : 'user',
            parts: [{ text: entry.text }]
          }));

          // 新しいプロンプトを追加
          chatHistory.push({ role: 'user', parts: [{ text: prompt }] });

          const payload = {
            contents: chatHistory
          };

          const response = await fetch(API_URL + apiKey, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });

          if (!response.ok) {
            if (response.status === 429) {
              const delay = initialDelay * Math.pow(2, retries);
              console.warn(`API Rate limit exceeded. Retrying in ${delay / 1000}s...`);
              await new Promise(res => setTimeout(res, delay));
              retries++;
              continue;
            }
            throw new Error(`API error: ${response.status}`);
          }

          const result = await response.json();
          if (result.candidates && result.candidates.length > 0 &&
              result.candidates[0].content && result.candidates[0].content.parts &&
              result.candidates[0].content.parts.length > 0) {
            return result.candidates[0].content.parts[0].text;
          } else {
            console.error('Unexpected API response structure:', result);
            return 'ごめんなさい、うまく考えられなかったみたい。もう一度試してくれる？';
          }
        } catch (error) {
          console.error('API call failed:', error);
          if (retries < maxRetries - 1) {
            const delay = initialDelay * Math.pow(2, retries);
            await new Promise(res => setTimeout(res, delay));
            retries++;
          } else {
            return 'エラーが発生しました。時間を置いてからお試しください。';
          }
        }
      }
    }

    // 送信ボタンのハンドラー
    async function handleSend() {
      const text = (inputEl.value || '').trim();
      if (!text) {
        inputEl.focus();
        return;
      }
      addBubble('student', text);
      inputEl.value = '';

      const persona = getPersona();
      let geminiResponse;

      // ステップごとに異なるプロンプトを作成してAPIを呼び出す
      if (state.step < 3) {
        const questionPrompt = `あなたは「${persona}」です。生徒の感想を深めるための、次の質問を日本語で1つだけ作成してください。例や例文、余計な説明は含めず、質問と励ましの言葉だけにしてください。`;
        geminiResponse = await fetchGeminiResponse(questionPrompt);

        if (geminiResponse) {
          state.step++;
          updateProgress();
          addBubble('teacher', geminiResponse);
        }
      }

      // 最後のステップでヒントを生成
      if (state.step === 3) {
        const hintPrompt = `これまでの会話を参考に、生徒が感想文をまとめるためのヒントを、以下のフォーマットで作成してください。
        
        【感想の型】
        ① 印象に残ったこと：
        ② もっと知りたいと思ったこと：
        ③ なるほどと思ったこと：
        ④ 気づきのまとめ：
        ⑤ 次の一歩：

        ただし、例文や具体的な内容は書かずに、生徒の言葉を元にした抽象的な型（例：「あなたの言葉『〇〇』『△△』を手がかりに深めよう」など）を提示してください。`;
        
        geminiResponse = await fetchGeminiResponse(hintPrompt);
        
        if (geminiResponse) {
          hintEl.value = geminiResponse;
          hintWrap.classList.remove('hidden');
          addBubble('teacher', 'ここまでの考え、とても良いね。仕上げに役立つヒントを用意したよ。');
        }
      }
      setUIState(true); // UIを有効化
    }

    // アプリを初期状態に戻す関数
    function start() {
      logEl.innerHTML = '';
      hintWrap.classList.add('hidden');
      hintEl.value = '';
      state.step = 0;
      state.history = [];
      updateProgress();
      addBubble('teacher', '授業の感想を教えてください。');
      setUIState(true);
    }

    // イベントリスナーの設定
    sendBtn.addEventListener('click', handleSend);
    inputEl.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        handleSend();
      }
    });
    resetBtn.addEventListener('click', start);
    exportBtn.addEventListener('click', async () => {
      const text = hintEl.value.trim();
      if (!text) {
        addBubble('teacher', 'まずは3つの質問に答えて、ヒントを出そう。');
        return;
      }
      try {
        await navigator.clipboard.writeText(text);
        addBubble('teacher', 'ヒントをコピーしたよ。自分の言葉で仕上げよう。');
      } catch {
        hintEl.focus();
        hintEl.select();
        addBubble('teacher', 'クリップボードが使えない環境だよ。ヒントを選択してコピーしてね。');
      }
    });

    // アプリの開始
    start();
  </script>
</body>
</html>
